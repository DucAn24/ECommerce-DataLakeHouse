version: '3.8'

services:

  # =============================================================================
  # INFRASTRUCTURE SERVICES - Core Data Infrastructure
  # =============================================================================

  # --- Apache Kafka with KRaft ---
  kafka:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka
    container_name: lakehouse-kafka
    ports:
      - "9092:9092"
      - "9101:9101"
      - "19092:19092"  # Controller listener port
    environment:
      # KRaft mode configuration
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:19092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      
      # Listener configuration
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092,CONTROLLER://kafka:19092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      
      # Topic defaults
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      
      # Auto topic creation
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      
      # Monitoring
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      
      # KRaft metadata
      KAFKA_METADATA_LOG_SEGMENT_MS: 15000
      KAFKA_METADATA_MAX_RETENTION_MS: 604800000
      KAFKA_METADATA_LOG_MAX_RECORD_BYTES_BETWEEN_SNAPSHOTS: 2800
      
      # Log directories
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_METADATA_LOG_DIR: /var/lib/kafka/metadata
    volumes:
      - kafka-data:/var/lib/kafka/data
      - kafka-metadata:/var/lib/kafka/metadata
    networks:
      - lakehouse-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # --- Schema Registry ---
  schema-registry:
    image: confluentinc/cp-schema-registry:7.8.0
    hostname: schema-registry
    container_name: lakehouse-schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      # KRaft mode - no Zookeeper needed
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - lakehouse-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/subjects"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # --- PostgreSQL (Source Database) ---
  postgres:
    image: postgres:15-alpine
    hostname: postgres
    container_name: lakehouse-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ecommerce
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_REPLICA_IDENTITY: FULL
    command: ["postgres", "-c", "wal_level=logical", "-c", "max_wal_senders=1", "-c", "max_replication_slots=1"]
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    networks:
      - lakehouse-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # --- MinIO (Object Storage) ---
  minio:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z
    hostname: minio
    container_name: lakehouse-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password123
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - lakehouse-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # --- MinIO Setup (Creates buckets) ---
  minio-setup:
    image: minio/mc:RELEASE.2025-07-23T15-54-02Z
    container_name: lakehouse-minio-setup
    depends_on:
      - minio
    networks:
      - lakehouse-network
    volumes:
      - ./configs/minio/setup-buckets.sh:/setup-buckets.sh
    entrypoint: ["/setup-buckets.sh"]

  # --- Elasticsearch ---
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    hostname: elasticsearch
    container_name: lakehouse-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - cluster.name=lakehouse-cluster
      - node.name=lakehouse-node
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - lakehouse-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # --- Kibana ---
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    hostname: kibana
    container_name: lakehouse-kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      ELASTICSEARCH_USERNAME: ""
      ELASTICSEARCH_PASSWORD: ""
    depends_on:
      - elasticsearch
    volumes:
      - kibana-data:/usr/share/kibana/data
    networks:
      - lakehouse-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # =============================================================================
  # PROCESSING SERVICES - Stream & Batch Processing
  # =============================================================================

  # --- Hive Metastore Database ---
  metastore-db:
    image: postgres:15-alpine
    hostname: metastore-db
    container_name: lakehouse-metastore-db
    environment:
      POSTGRES_DB: metastore
      POSTGRES_USER: hive
      POSTGRES_PASSWORD: hive123
    volumes:
      - metastore-db-data:/var/lib/postgresql/data
    networks:
      - lakehouse-network
    restart: unless-stopped

  # --- Hive Metastore ---
  hive-metastore:
    image: apache/hive:4.0.0
    hostname: hive-metastore
    container_name: lakehouse-hive-metastore
    depends_on:
      - metastore-db
    environment:
      DB_DRIVER: postgres
      SERVICE_NAME: metastore
      SERVICE_OPTS: "-Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver -Djavax.jdo.option.ConnectionURL=jdbc:postgresql://metastore-db:5432/metastore -Djavax.jdo.option.ConnectionUserName=hive -Djavax.jdo.option.ConnectionPassword=hive123"
    ports:
      - "9083:9083"
    networks:
      - lakehouse-network
    healthcheck:
      test: ["CMD-SHELL", "netstat -tuln | grep :9083 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # --- Flink JobManager ---
  flink-jobmanager:
    image: flink:1.18-java11
    hostname: flink-jobmanager
    container_name: lakehouse-flink-jobmanager
    ports:
      - "8082:8081"  # Changed to avoid conflict with Schema Registry
    command: jobmanager
    volumes:
      - flink-checkpoints:/tmp/flink-checkpoints
      - flink-savepoints:/tmp/flink-savepoints
      - ./flink-jobs:/opt/flink/jobs
      - ./configs/flink/flink.properties:/opt/flink/conf/flink-conf.yaml
    networks:
      - lakehouse-network
    restart: unless-stopped

  # --- Flink TaskManager ---
  flink-taskmanager:
    image: flink:1.18-java11
    hostname: flink-taskmanager
    container_name: lakehouse-flink-taskmanager
    depends_on:
      - flink-jobmanager
    command: taskmanager
    deploy:
      replicas: 2
    volumes:
      - flink-checkpoints:/tmp/flink-checkpoints
      - flink-savepoints:/tmp/flink-savepoints
      - ./configs/flink/flink.properties:/opt/flink/conf/flink-conf.yaml
    networks:
      - lakehouse-network
    restart: unless-stopped

  # --- Spark Master ---
  spark-master:
    image: bitnami/spark:3.5
    hostname: spark-master
    container_name: lakehouse-spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - ./spark-jobs:/opt/bitnami/spark/jobs
      - spark-data:/opt/bitnami/spark/data
      - ./configs/spark/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
    networks:
      - lakehouse-network
    restart: unless-stopped

  # --- Spark Worker ---
  spark-worker:
    image: bitnami/spark:3.5
    hostname: spark-worker
    container_name: lakehouse-spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    depends_on:
      - spark-master
    volumes:
      - ./spark-jobs:/opt/bitnami/spark/jobs
      - spark-data:/opt/bitnami/spark/data
      - ./configs/spark/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
    networks:
      - lakehouse-network
    restart: unless-stopped

  # --- Trino Coordinator ---
  trino-coordinator:
    image: trinodb/trino:475
    hostname: trino-coordinator
    container_name: lakehouse-trino-coordinator
    ports:
      - "8083:8080"  # Changed to avoid conflict
    environment:
      - TRINO_ENVIRONMENT=production
    volumes:
      - ./configs/trino:/etc/trino
    networks:
      - lakehouse-network
    depends_on:
      - hive-metastore
    restart: unless-stopped

  # --- Trino Worker ---
  trino-worker:
    image: trinodb/trino:475
    hostname: trino-worker
    container_name: lakehouse-trino-worker
    environment:
      - TRINO_ENVIRONMENT=production
    volumes:
      - ./configs/trino:/etc/trino
    networks:
      - lakehouse-network
    command: >
      sh -c "
      cp /etc/trino/worker-config.properties /etc/trino/config.properties &&
      cp /etc/trino/worker-node.properties /etc/trino/node.properties &&
      /usr/lib/trino/bin/run-trino
      "
    depends_on:
      - trino-coordinator
    deploy:
      replicas: 2
    restart: unless-stopped

  # =============================================================================
  # INGESTION SERVICES - Data Ingestion & CDC
  # =============================================================================

  # --- Kafka Connect with Debezium (KRaft Mode) ---
  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.8.0
    hostname: kafka-connect
    container_name: lakehouse-kafka-connect
    depends_on:
      - kafka
      - postgres
    ports:
      - "8084:8083"  # Changed to avoid conflict with Trino
    environment:
      # Bootstrap servers (no Zookeeper needed in KRaft mode)
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_REST_PORT: 8083
      
      # Connect cluster configuration
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      
      # Converters
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: 'false'
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      
      # Monitoring interceptors
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      
      # Plugin path
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      
      # Logging (removed Zookeeper related loggers)
      CONNECT_LOG4J_LOGGERS: org.reflections=ERROR
    volumes:
      - ./configs/kafka-connect:/etc/kafka-connect/configs
      - ./configs/kafka-connect/init-connectors.sh:/init-connectors.sh
    networks:
      - lakehouse-network
    command: ["/init-connectors.sh"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # --- Filebeat ---
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    hostname: filebeat
    container_name: lakehouse-filebeat
    user: root
    volumes:
      - ./configs/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/log:/var/log:ro
      - filebeat-data:/usr/share/filebeat/data
      - ./data/logs:/var/log/sample:ro
    environment:
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - KIBANA_HOST=kibana:5601
      - KAFKA_HOST=kafka:29092
    networks:
      - lakehouse-network
    depends_on:
      - kafka
      - elasticsearch
    command: ["--strict.perms=false"]
    restart: unless-stopped

  # --- Logstash ---
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    hostname: logstash
    container_name: lakehouse-logstash
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx1g -Xms1g"
    volumes:
      - ./configs/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./configs/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - logstash-data:/usr/share/logstash/data
    networks:
      - lakehouse-network
    depends_on:
      - elasticsearch
      - kafka
    restart: unless-stopped

  # --- Kafka UI (KRaft Mode) ---
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    container_name: lakehouse-kafka-ui
    ports:
      - "8085:8080"  # Changed to avoid conflicts
    environment:
      KAFKA_CLUSTERS_0_NAME: lakehouse-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      # No Zookeeper needed in KRaft mode
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
      # KRaft specific settings
      KAFKA_CLUSTERS_0_METRICS_PORT: 9101
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - lakehouse-network
    depends_on:
      - kafka
      - kafka-connect
    restart: unless-stopped

  # --- Log Generator (for testing) ---
  log-generator:
    image: mingrammer/flog:0.4.3
    hostname: log-generator
    container_name: lakehouse-log-generator
    volumes:
      - ./data/logs:/var/log/sample
      - ./scripts/utils/generate-logs.sh:/generate-logs.sh
    networks:
      - lakehouse-network
    command: ["/generate-logs.sh"]
    restart: unless-stopped

  # =============================================================================
  # ORCHESTRATION SERVICES - Workflow & Monitoring
  # =============================================================================

  # --- Redis (for Airflow) ---
  redis:
    image: redis:7-alpine
    hostname: redis
    container_name: lakehouse-redis
    expose:
      - 6379
    networks:
      - lakehouse-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # --- Airflow Database ---
  airflow-db:
    image: postgres:15-alpine
    hostname: airflow-db
    container_name: lakehouse-airflow-db
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow-db-data:/var/lib/postgresql/data
    networks:
      - lakehouse-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # --- Airflow Webserver ---
  airflow-webserver:
    image: apache/airflow:2.7.3-python3.11
    hostname: airflow-webserver
    container_name: lakehouse-airflow-webserver
    command: webserver
    entrypoint: |
      bash -c "
      airflow db init &&
      airflow users create --role Admin --username admin --email admin@admin.com --firstname admin --lastname admin --password admin &&
      airflow webserver
      "
    env_file:
      - ./configs/airflow/airflow.env
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./configs/airflow:/opt/airflow/config
      - ./scripts:/opt/airflow/scripts
    ports:
      - "8086:8080"  # Changed to avoid conflicts
    networks:
      - lakehouse-network
    depends_on:
      redis:
        condition: service_healthy
      airflow-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # --- Airflow Scheduler ---
  airflow-scheduler:
    image: apache/airflow:2.7.3-python3.11
    hostname: airflow-scheduler
    container_name: lakehouse-airflow-scheduler
    command: scheduler
    env_file:
      - ./configs/airflow/airflow.env
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./configs/airflow:/opt/airflow/config
      - ./scripts:/opt/airflow/scripts
    networks:
      - lakehouse-network
    depends_on:
      redis:
        condition: service_healthy
      airflow-db:
        condition: service_healthy
      airflow-webserver:
        condition: service_healthy
    restart: unless-stopped

  # --- Airflow Worker ---
  airflow-worker:
    image: apache/airflow:2.7.3-python3.11
    hostname: airflow-worker
    container_name: lakehouse-airflow-worker
    command: celery worker
    env_file:
      - ./configs/airflow/airflow.env
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./configs/airflow:/opt/airflow/config
      - ./scripts:/opt/airflow/scripts
    networks:
      - lakehouse-network
    depends_on:
      redis:
        condition: service_healthy
      airflow-db:
        condition: service_healthy
      airflow-webserver:
        condition: service_healthy
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # --- Airflow Triggerer ---
  airflow-triggerer:
    image: apache/airflow:2.7.3-python3.11
    hostname: airflow-triggerer
    container_name: lakehouse-airflow-triggerer
    command: triggerer
    env_file:
      - ./configs/airflow/airflow.env
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./configs/airflow:/opt/airflow/config
    networks:
      - lakehouse-network
    depends_on:
      redis:
        condition: service_healthy
      airflow-db:
        condition: service_healthy
      airflow-webserver:
        condition: service_healthy
    restart: unless-stopped

  # --- Flower (Celery Monitoring) ---
  flower:
    image: apache/airflow:2.7.3-python3.11
    hostname: flower
    container_name: lakehouse-flower
    command: celery flower
    env_file:
      - ./configs/airflow/airflow.env
    ports:
      - "5555:5555"
    networks:
      - lakehouse-network
    depends_on:
      redis:
        condition: service_healthy
      airflow-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # =============================================================================
  # VISUALIZATION SERVICES - Business Intelligence & Analytics
  # =============================================================================

  # --- Superset Database ---
  superset-db:
    image: postgres:15-alpine
    hostname: superset-db
    container_name: lakehouse-superset-db
    environment:
      POSTGRES_DB: superset
      POSTGRES_USER: superset
      POSTGRES_PASSWORD: superset
    volumes:
      - superset-db-data:/var/lib/postgresql/data
    networks:
      - lakehouse-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "superset"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # --- Apache Superset ---
  superset:
    image: apache/superset:3.0.1
    hostname: superset
    container_name: lakehouse-superset
    environment:
      - DATABASE_DIALECT=postgresql
      - DATABASE_USER=superset
      - DATABASE_PASSWORD=superset
      - DATABASE_HOST=superset-db
      - DATABASE_PORT=5432
      - DATABASE_DB=superset
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FLASK_ENV=production
      - SUPERSET_ENV=production
      - SUPERSET_LOAD_EXAMPLES=no
      - CYPHER_SUITES=ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS
    ports:
      - "8088:8088"
    volumes:
      - ./configs/superset:/app/pythonpath
      - ./configs/superset/init-superset.sh:/init-superset.sh
      - superset-home:/app/superset_home
    networks:
      - lakehouse-network
    depends_on:
      superset-db:
        condition: service_healthy
      trino-coordinator:
        condition: service_started
    command: ["/init-superset.sh"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped


# =============================================================================
# VOLUMES - Persistent Data Storage
# =============================================================================
volumes:
  # Infrastructure
  kafka-data:
    driver: local
  kafka-metadata:
    driver: local
  postgres-data:
    driver: local
  minio-data:
    driver: local
  elasticsearch-data:
    driver: local
  kibana-data:
    driver: local

  # Processing
  metastore-db-data:
    driver: local
  flink-checkpoints:
    driver: local
  flink-savepoints:
    driver: local
  spark-data:
    driver: local
  jupyter-data:
    driver: local

  # Ingestion
  filebeat-data:
    driver: local
  logstash-data:
    driver: local

  # Orchestration
  airflow-db-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

  # Visualization
  superset-db-data:
    driver: local
  superset-home:
    driver: local

# =============================================================================
# NETWORK - Container Communication
# =============================================================================
networks:
  lakehouse-network:
    driver: bridge
    name: lakehouse-network
